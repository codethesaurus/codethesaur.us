{
  "meta": {
    "language": "go",
    "language_version": "1.16",
    "language_name": "Go",
    "structure": "lists"
  },
  "concepts": {
    "name_of_ordered_mutable_list": {
      "comment": "It is similar to an array just dynamically sized",
      "code": "Slice",
      "name": "What is a ordered mutable list called?"
    },
    "create_a_ordered_mutable_list": {
      "comment": "s is the list(slice) and int is the data type it can hold",
      "code": "var s = [] int{1, 2, 3}",
      "name": "Create the list"
    },
    "ordered_mutable_list_start_number": {
      "code": "0",
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_mutable_list": {
      "code": "list[index]",
      "name": "Access element by index"
    },
    "insert_into_beginning_of_ordered_mutable_list": {
      "comment": "Create a new slice and append the previous one to it",
      "code": "s = append([]int{element}, s...)",
      "name": "Insert element at beginning"
    },
    "insert_into_end_of_ordered_mutable_list": {
      "code": "s = append(s, element)",
      "name": "Insert element at end"
    },
    "insert_into_middle_of_ordered_mutable_list": {
      "code": "s = append(x[:index+1], x[index:]...)\ns[index]=value",
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_ordered_mutable_list": {
      "code": "s = s[1:]",
      "name": "Erase first element"
    },
    "erase_element_at_end_of_ordered_mutable_list": {
      "code": "s = s[:len(s)-1]",
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_ordered_mutable_list": {
      "code": "s = append(s[:index], s[index+1:]...)",
      "name": "Erase element in the middle"
    },
    "swap_elements_in_ordered_mutable_list": {
      "code": "s[index1], s[index2] = s[index2], s[index1]",
      "name": "Swap two elements"
    },
    "delete_ordered_mutable_list": {
      "code": "s = nil",
      "name": "Delete the list"
    },
    "name_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "What is a unordered mutable list called?"
    },
    "create_a_unordered_mutable_list": {
      "not-implemented": true,
      "name": "unordered"
    },
    "unordered_mutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "insert_into_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase first element"
    },
    "erase_element_at_end_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase element in the middle"
    },
    "swap_elements_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Swap two elements"
    },
    "delete_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_ordered_immutable_list": {
      "not-implemented": true,
      "name": "What is a ordered immutable list called?"
    },
    "create_a_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "ordered_immutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "delete_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_unordered_immutable_list": {
      "not-implemented": true,
      "name": "What is a unordered immutable list called?"
    },
    "create_a_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "unordered_immutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "delete_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_mutable_hashed_list": {
      "code": "map",
      "name": "What is a mutable hashed list called?"
    },
    "create_a_mutable_hashed_list": {
      "code": "var my_map = map[key_type] value_type {\n   key1: value1\n   key2: value2\n} ",
      "name": "Create the list"
    },
    "insert_element_to_mutable_hashed_list": {
      "code": "my_map[key] = value",
      "name": "Insert an element"
    },
    "erase_element_from_mutable_hashed_list": {
      "code": "delete(my_map, key)",
      "name": "Erase an element from the list"
    },
    "delete_mutable_hashed_list": {
      "code": "my_map = nil",
      "name": "Delete the list"
    },
    "name_of_immutable_hashed_list": {
      "not-implemented": true,
      "name": "What is an immutable hashed list called?"
    },
    "create_a_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "delete_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "create_a_mutable_set": {
      "not-implemented": true,
      "name": "Create a mutable key/value set"
    },
    "get_key_from_mutable_set": {
      "not-implemented": true,
      "name": "Get key"
    },
    "get_value_from_mutable_set": {
      "not-implemented": true,
      "name": "Get value"
    },
    "get_all_keys_from_mutable_set": {
      "not-implemented": true,
      "name": "Get all keys"
    },
    "get_all_values_from_mutable_set": {
      "not-implemented": true,
      "name": "Get all values"
    },
    "swap_key_and_value_in_mutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_mutable_set": {
      "not-implemented": true,
      "name": "Delete the set"
    },
    "create_a_immutable_set": {
      "not-implemented": true,
      "name": "Create an immutable key/value set"
    },
    "get_key_from_immutable_set": {
      "not-implemented": true,
      "name": "Get key"
    },
    "get_value_from_immutable_set": {
      "not-implemented": true,
      "name": "Get value"
    },
    "get_all_keys_from_immutable_set": {
      "not-implemented": true,
      "name": "Get all keys"
    },
    "get_all_values_from_immutable_set": {
      "not-implemented": true,
      "name": "Get all values"
    },
    "swap_key_and_value_in_immutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_immutable_set": {
      "not-implemented": true,
      "name": "Delete the set"
    },
    "find_element_at_position": {
      "not-implemented": true
    },
    "find_element_by_value": {
      "comment": "Here s is the slice (list) and value is the search query",
      "code": "for _, v := range s {\n    if s == value {\n        return true\n    }\n}\nreturn false",
      "name": "Find/search for an element by value"
    },
    "find_minimum_element": {
      "comment": "Here s is the slice(list) and min is the minimum value",
      "code": "min = s[0]\nfor _, value := range s {\n    if (value < min) {\n        min = value\n    }\n}",
      "name": "Find the minimum value in a list"
    },
    "find_maximum_element": {
      "comment": "Here s is the slice(list) and max is the maximum value",
      "code": "max = s[0]\nfor _, value := range s {\n    if (value > max) {\n        max = value\n    }\n}",
      "name": "Find the maximum value in a list"
    },
    "convert_list_to_string": {
      "comment": "Built-in \"strings\" package needs to be imported first",
      "code": "str := strings.Join(slice, \" \")",
      "name": "Convert a list to a string"
    },
    "concatenate_two_lists": {
      "code": "final_list := append(list1, list2...)",
      "name": "Concatenate two lists together"
    },
    "split_list_at_index": {
      "code": "s1 := s[0:index+1] \ns2 := s[index+1:]",
      "name": "Split lists at an index"
    },
    "split_list_at_value": {
      "not-implemented": true,
      "name": "Split list at a value"
    },
    "duplicate_a_list": {
      "code": "new_list = list",
      "name": "Duplicate a list"
    },
    "duplicate_subset_of_list": {
      "code": "new_list = list[start:end]",
      "name": "Duplicate a portion/subset of a list"
    },
    "get_list_length": {
      "code": "len(list)",
      "name": "Get list length"
    },
    "resize_list": {
      "not-implemented": true,
      "name": "Increase/decrease list size"
    },
    "do_two_lists_match_exactly": {
      "comment": "Need to import standard library \"reflect\"",
      "code": "reflect.DeepEqual(list1, list2)",
      "name": "Do two lists match every element?"
    },
    "do_two_lists_contain_same_items": {
      "comment": "Need to import standard library \"reflect\"",
      "code": "reflect.DeepEqual(list1, list2)",
      "name": "Do two lists contain all the same items?"
    },
    "does_list_satisfy_some_expression": {
      "not-implemented": true,
      "name": "Does a list satisfy some expression?"
    },
    "does_list_not_satisfy_an_expression": {
      "not-implemented": true,
      "name": "Does a list entirely not satisfy an expression?"
    },
    "sort_list": {
      "comment": "Need to import standard library \"sort\"; can also use Floats64s or Strings",
      "code": "sort.Ints(list)",
      "name": "Sort a list"
    },
    "shuffle_list": {
      "not-implemented": true,
      "name": "Shuffle list elements"
    },
    "reverse_list": {
      "not-implemented": true,
      "name": "Reverse order of list elements"
    },
    "map": {
      "not-implemented": true,
      "name": "Map function across list"
    },
    "filter": {
      "not-implemented": true,
      "name": "Filter a list based on criteria"
    },
    "reduce_left": {
      "not-implemented": true,
      "name": "Reduce a list left-to-right"
    },
    "reduce_right": {
      "not-implemented": true,
      "name": "Reduce a list right-to-left"
    }
  }
}
