{
  "meta": {
    "language": "ada",
    "language_version": "2012",
    "language_name": "Ada",
    "structure": "lists"
  },
  "concepts": {
    "name_of_ordered_mutable_list": {
      "code": "array \n vector",
      "name": "What is a ordered mutable list called?"
    },
    "create_a_ordered_mutable_list": {
      "code": "type Definite is array (Integer range 1 .. 10) of Integer;A1 : Definite; \n type Indefinite is array (Integer range <>) of Integer; A2 : Indefinite (1 .. 20);",
      "comment": "Method 1 creates array of size 1 to 10 and is fixed size. Method 2 creates array with Integer range, where range is indefinite i.e we can change the size of array.",
      "name": "Create the list"
    },
    "ordered_mutable_list_start_number": {
      "code": "type A1 is array (Integer range <>) of Integer; \n type A2 is array (character range 'a' .. 'z') of Integer; \n type A3 is array (Integer range 1 .. 0) of Integer; \n type A4 is array (Boolean) of Integer; ",
      "comment": "In other programming languages, like Java and python where list indices work on pointers and references, in Ada, we the programmer decide what the index type should be. It can be of any type, just change the type inside the parenthesis.",
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_mutable_list": {
      "code": "Put_Line(Integer'Image(V(1)));",
      "comment": "Here index start from 1, so to access value of 1st element in array do V(index)",
      "name": "Access element by index"
    },
    "insert_into_beginning_of_ordered_mutable_list": {
      "code": "X : Arr(1 .. 3) := (1, 2, 3); Y : Arr(1 .. 4) := (4) & X; \n V: Vector; V.Prepend(20);",
      "comment": "Method 1,concatenate and save the values in new array. In method 2, V is a Vector and V is prepended with value 20. For method 2, you need Ada.Containers.Vectors container.",
      "name": "Insert element at beginning"
    },
    "insert_into_end_of_ordered_mutable_list": {
      "code": "X : Arr(1 .. 3) := (1, 2, 3); Y : Arr(1 .. 4) := X & (4); \n V : Vector; V.Append(20);",
      "comment": "Method 1 concatenates and save the values in new array. In method 2, V is a Vector and V is appended with value 20. For method 2, you need Ada.Containers.Vectors container.",
      "name": "Insert element at end"
    },
    "insert_into_middle_of_ordered_mutable_list": {
      "code": "X : Arr(1 .. 3) := (1, 2, 3); Y : Arr(1 .. 7) := X & (6) & X; \n V.insert(C,12);",
      "comment": "In method 1, to insert value in middle of the array, you can concatenate the array with known range and save the values in new array. In method 2, V is a vector.To insert element in middle in the vector, define Cursor C and then value to be inserted before C. For method 2, you need Ada.Containers.Vectors container.",
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_ordered_mutable_list": {
      "code": "V.Delete(index)",
      "name": "Erase first element"
    },
    "erase_element_at_end_of_ordered_mutable_list": {
      "code": "V.Delete(index)",
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_ordered_mutable_list": {
      "code": "V.Delete(index)",
      "name": "Erase element in the middle"
    },
    "swap_elements_in_ordered_mutable_list": {
      "not-implemented": "true",
      "name": "Swap two elements"
    },
    "delete_ordered_mutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_unordered_mutable_list": {
      "code": "sets",
      "name": "What is a unordered mutable list called?"
    },
    "create_a_unordered_mutable_list": {
      "code": "S : Set;",
      "comment": "Ad.Containers.Ordered_Sets container is required",
      "name": "unordered"
    },
    "unordered_mutable_list_start_number": {
      "not-implemented": "true",
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Access element by index"
    },
    "insert_into_unordered_mutable_list": {
      "code": "S.Include (value); \n S.Insert (value);",
      "comment": "S.Insert(value) raises Constraint_Error if value appended is already in the list",
      "name": "Insert element at end"
    },
    "erase_element_at_beginning_of_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Erase first element"
    },
    "erase_element_at_end_of_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Erase element in the middle"
    },
    "swap_elements_in_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Swap two elements"
    },
    "delete_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_ordered_immutable_list": {
      "not-implemented": "true",
      "name": "What is a ordered immutable list called?"
    },
    "create_a_ordered_immutable_list": {
      "not-implemented": "true",
      "name": "Create the list"
    },
    "ordered_immutable_list_start_number": {
      "not-implemented": "true",
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_immutable_list": {
      "not-implemented": "true",
      "name": "Access element by index"
    },
    "delete_ordered_immutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_unordered_immutable_list": {
      "not-implemented": "true",
      "name": "What is a unordered immutable list called?"
    },
    "create_a_unordered_immutable_list": {
      "not-implemented": "true",
      "name": "Create the list"
    },
    "unordered_immutable_list_start_number": {
      "not-implemented": "true",
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_immutable_list": {
      "not-implemented": "true",
      "name": "Access element by index"
    },
    "delete_unordered_immutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "What is a mutable hashed list called?"
    },
    "create_a_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Create the list"
    },
    "insert_element_to_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Insert an element"
    },
    "erase_element_from_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Erase an element from the list"
    },
    "delete_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_immutable_hashed_list": {
      "not-implemented": "true",
      "name": "What is an immutable hashed list called?"
    },
    "create_a_immutable_hashed_list": {
      "not-implemented": "true",
      "name": "Create the list"
    },
    "delete_immutable_hashed_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "create_a_mutable_set": {
      "code": "M : Map;",
      "comment": "Ada.Containers.Indeifinite_Hashed_Maps containers is required.",
      "name": "Create a mutable key/value set"
    },
    "get_key_from_mutable_set": {
      "not-implemented": "true",
      "name": "Get key"
    },
    "get_value_from_mutable_set": {
      "code": "M(key)",
      "name": "Get value"
    },
    "get_all_keys_from_mutable_set": {
      "code": "for C in M.Iterate loop \n Put_Line (Key (C)) \n end loop;",
      "name": "Get all keys"
    },
    "get_all_values_from_mutable_set": {
      "code": "for C in M.Iterate loop \n Put_Line (Integer'Image(M(C))); \n end loop",
      "name": "Get all values"
    },
    "swap_key_and_value_in_mutable_set": {
      "not-implemented": "true",
      "name": "Swap a key and value"
    },
    "delete_mutable_set": {
      "not-implemented": "true",
      "name": "Delete the set"
    },
    "create_a_immutable_set": {
      "not-implemented": "true",
      "name": "Create an immutable key/value set"
    },
    "get_key_from_immutable_set": {
      "not-implemented": "true",
      "name": "Get key"
    },
    "get_value_from_immutable_set": {
      "not-implemented": "true",
      "name": "Get value"
    },
    "get_all_keys_from_immutable_set": {
      "not-implemented": "true",
      "name": "Get all keys"
    },
    "get_all_values_from_immutable_set": {
      "not-implemented": "true",
      "name": "Get all values"
    },
    "swap_key_and_value_in_immutable_set": {
      "not-implemented": "true",
      "name": "Swap a key and value"
    },
    "delete_immutable_set": {
      "not-implemented": "true",
      "name": "Delete the set"
    },
    "find_element_at_position": {
      "code": "V(index)"
    },
    "find_element_by_value": {
      "code": "V.Find_Index (value) \n V.Find (value)",
      "name": "Find/search for an element by value"
    },
    "find_minimum_element": {
      "not-implemented": "true",
      "name": "Find the minimum value in a list"
    },
    "find_maximum_element": {
      "not-implemented": "true",
      "name": "Find the maximum value in a list"
    },
    "convert_list_to_string": {
      "not-implemented": "true",
      "name": "Convert a list to a string"
    },
    "concatenate_two_lists": {
      "code": "A1 : T := (1,2,3); A2 : T := (4,5,6); A3 : T := A1 & A2;",
      "comment": " We can concatenate more 2 list by adding operator '&'. It must be noted that T should have the array size larger or equal to the arrays which is being concatenated.",
      "name": "Concatenate two lists together"
    },
    "split_list_at_index": {
      "not-implemented": "true",
      "name": "Split lists at an index"
    },
    "split_list_at_value": {
      "not-implemented": "true",
      "name": "Split list at a value"
    },
    "duplicate_a_list": {
      "code": "A1 : T(1 .. 10); \n A2 : T(1 .. 10); \n begin \n A1 := A2;",
      "comment": " index of array A2 must be less than (or equal) to A1, or else an exception is raised.",
      "name": "Duplicate a list"
    },
    "duplicate_subset_of_list": {
      "code": "A1 (2 .. 4) := A2 (5 .. 7);",
      "comment": "to copy a subset of an array, the variable must be of type array and the programmer must specify the index of the array. It must be noted that both range specified in A1 and A2 should be of equal length.",
      "name": "Duplicate a portion/subset of a list"
    },
    "get_list_length": {
      "code": "A1'Length",
      "name": "Get list length"
    },
    "resize_list": {
      "not-implemented": "true",
      "name": "Increase/decrease list size"
    },
    "do_two_lists_match_exactly": {
      "code": "Arr1 = Arr2",
      "comment": "returns boolean value.",
      "name": "Do two lists match every element?"
    },
    "do_two_lists_contain_same_items": {
      "code": "Arr1 = Arr2",
      "comment": "returns boolean value",
      "name": "Do two lists contain all the same items?"
    },
    "does_list_satisfy_some_expression": {
      "not-implemented": "true",
      "name": "Does a list satisfy some expression?"
    },
    "does_list_not_satisfy_an_expression": {
      "not-implemented": "true",
      "name": "Does a list entirely not satisfy an expression?"
    },
    "sort_list": {
      "code": "Sort (V)",
      "comment": "Ada.Containers.Vectors is required for above function to work.",
      "name": "Sort a list"
    },
    "shuffle_list": {
      "not-implemented": "true",
      "name": "Shuffle list elements"
    },
    "reverse_list": {
      "code": "V.Reverse_Elements;",
      "comment": "Ada.Containers.Vectors is required for above function to work.",
      "name": "Reverse order of list elements"
    },
    "map": {
      "not-implemented": "true",
      "name": "Map function across list"
    },
    "filter": {
      "not-implemented": "true",
      "name": "Filter a list based on criteria"
    },
    "reduce_left": {
      "not-implemented": "true",
      "name": "Reduce a list left-to-right"
    },
    "reduce_right": {
      "not-implemented": "true",
      "name": "Reduce a list right-to-left"
    }
  }
}
