{
  "meta": {
    "language": "java",
    "language_version": "11",
    "language_name": "Java",
    "structure": "lists"
  },
  "concepts": {
    "name_of_ordered_mutable_list": {
      "comment": "Provided by `java.util.LinkedList` (doubly linked list) or `java.util.ArrayList` (array backed doubly linked list).",
      "code": "LinkedList or ArrayList",
      "name": "What is a ordered mutable list called?"
    },
    "create_a_ordered_mutable_list": {
      "comment": "Most built-in collection types in Java support generics.",
      "code": "LinkedList<Integer> myList = new LinkedList<>();",
      "name": "Create the list"
    },
    "ordered_mutable_list_start_number": {
      "code": "0",
      "name": "What number does it start at?"
    },
    "ordered_mutable_list_can_be_appended": {
      "code": "Yes",
      "name": "Can you append to it?"
    },
    "ordered_mutable_list_can_be_inserted_in_middle": {
      "code": "Yes",
      "name": "Can you insert into the middle of it?"
    },
    "access_element_in_ordered_mutable_list": {
      "comment": "This will be constant time in an `ArrayList`, but potentially slow in a `LinkedList`.",
      "code": "myList.get(1);",
      "name": "Access element by index"
    },
    "insert_into_beginning_of_ordered_mutable_list": {
      "code": "// for a LinkedList\nmyList.addFirst(7);\n// for an ArrayList\nmyList.add(0, 7);",
      "name": "Insert element at beginning"
    },
    "insert_into_end_of_ordered_mutable_list": {
      "code": "// for a LinkedList\nmyList.addLast(10);\n// for an ArrayList\nmyList.add(10);",
      "name": "Insert element at end"
    },
    "insert_into_middle_of_ordered_mutable_list": {
      "comment": "This will be slow in a `LinkedList`, but fast in an `ArrayList`.",
      "code": "myList.add(1, 7);",
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_ordered_mutable_list": {
      "code": "// for a LinkedList\nmyList.removeFirst();\n// for an ArrayList\nmyList.remove(0);",
      "name": "Erase first element"
    },
    "erase_element_at_end_of_ordered_mutable_list": {
      "code": "// for a LinkedList\nmyList.removeLast();\n// for an ArrayList\nmyList.remove(myList.size()-1);",
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_ordered_mutable_list": {
      "comment": "This will be slow in a `LinkedList`, but fast in an `ArrayList`.",
      "code": "myList.remove(1);",
      "name": "Erase element in the middle"
    },
    "swap_elements_in_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Swap two elements"
    },
    "delete_ordered_mutable_list": {
      "comment": "If this was the last reference to the list Object, it is now eligible for garbage collection.",
      "code": "myList = null;",
      "name": "Delete the list"
    },
    "name_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "What is a unordered mutable list called?"
    },
    "create_a_unordered_mutable_list": {
      "not-implemented": true,
      "name": "unordered"
    },
    "unordered_mutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "unordered_mutable_list_can_be_appended": {
      "not-implemented": true,
      "name": "Can you append to it?"
    },
    "unordered_mutable_list_can_be_inserted_in_middle": {
      "not-implemented": true,
      "name": "Can you insert into the middle of it?"
    },
    "access_element_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "insert_into_beginning_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element at beginning"
    },
    "insert_into_end_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element at end"
    },
    "insert_into_middle_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase first element"
    },
    "erase_element_at_end_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase element in the middle"
    },
    "swap_elements_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Swap two elements"
    },
    "delete_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_ordered_immutable_list": {
      "comment": "Can only be created via a factory method.",
      "not-implemented": true,
      "name": "What is a ordered immutable list called?"
    },
    "create_a_ordered_immutable_list": {
      "code": "Collections.unmodifiableList(myList);",
      "name": "Create the list"
    },
    "ordered_immutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "delete_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_unordered_immutable_list": {
      "not-implemented": true,
      "name": "What is a unordered immutable list called?"
    },
    "create_a_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "unordered_immutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "delete_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_mutable_hashed_list": {
      "comment": "The `java.util.LinkedHashSet` provides set semantics, but preserves entries in the order they were added.",
      "code": "LinkedHashSet",
      "name": "What is a mutable hashed list called?"
    },
    "create_a_mutable_hashed_list": {
      "code": "LinkedHashMap<Integer, String> myNumbers = new LinkedHashMap<>();",
      "name": "Create the list"
    },
    "insert_element_to_mutable_hashed_list": {
      "code": "myNumbers.put(1, \"One\");",
      "name": "Insert an element"
    },
    "erase_element_from_mutable_hashed_list": {
      "code": "myNumbers.remove(1);",
      "name": "Erase an element from the list"
    },
    "delete_mutable_hashed_list": {
      "comment": "If this was the last reference to the list Object, it is now eligible for garbage collection.",
      "code": "myNumbers = null;",
      "name": "Delete the list"
    },
    "name_of_immutable_hashed_list": {
      "not-implemented": true,
      "name": "What is an immutable hashed list called?"
    },
    "create_a_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "insert_element_to_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Insert an element"
    },
    "erase_element_from_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Erase an element from the list"
    },
    "delete_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "create_a_mutable_set": {
      "code": "HashMap<String, String> translations = new HashMap<>();",
      "name": "Create a mutable key/value set"
    },
    "get_key_from_mutable_set": {
      "not-implemented": true,
      "name": "Get key"
    },
    "get_value_from_mutable_set": {
      "code": "translations.get(\"coding\");",
      "name": "Get value"
    },
    "get_all_keys_from_mutable_set": {
      "code": "translations.keySet();",
      "name": "Get all keys"
    },
    "get_all_values_from_mutable_set": {
      "code": "translations.values();",
      "name": "Get all values"
    },
    "swap_key_and_value_in_mutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_mutable_set": {
      "comment": "If this was the last reference to the list Object, it is now eligible for garbage collection.",
      "code": "translations = null;",
      "name": "Delete the set"
    },
    "create_a_immutable_set": {
      "comment": "Can only be created via a factory method.",
      "code": "Map<String, String> frozenTranslations = Collections.unmodifiableMap(translations);",
      "name": "Create an immutable key/value set"
    },
    "get_key_from_immutable_set": {
      "not-implemented": true,
      "name": "Get key"
    },
    "get_value_from_immutable_set": {
      "code": "frozenTranslations.get(\"coding\");",
      "name": "Get value"
    },
    "get_all_keys_from_immutable_set": {
      "code": "frozenTranslations.keySet();",
      "name": "Get all keys"
    },
    "get_all_values_from_immutable_set": {
      "code": "frozenTranslations.values();",
      "name": "Get all values"
    },
    "swap_key_and_value_in_immutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_immutable_set": {
      "comment": "If this was the last reference to the list Object, it is now eligible for garbage collection.",
      "code": "frozenTranslations = null;",
      "name": "Delete the set"
    },
    "find_element_at_position": {
      "not-implemented": true
    },
    "find_element_by_value": {
      "comment": "The stream capabilities added in Java 8+ provide a generic map, filter, and reduce capability for all built-in collections.",
      "code": "myList.stream().filter(v -> v == value).findFirst().get()",
      "name": "Find/search for an element by value"
    },
    "find_minimum_element": {
      "code": "myList\n      .stream()\n      .mapToInt(v -> v)\n      .min().orElseThrow(NoSuchElementException::new);",
      "name": "Find the minimum value in a list"
    },
    "find_maximum_element": {
      "code": "myList\n      .stream()\n      .mapToInt(v -> v)\n      .max().orElseThrow(NoSuchElementException::new);",
      "name": "Find the maximum value in a list"
    },
    "convert_list_to_string": {
      "comment": "If the list contains non-String objects, you can use the stream capabilities to map the items to Strings first.",
      "code": "String.join(\", \", list)",
      "name": "Convert a list to a string"
    },
    "concatenate_two_lists": {
      "code": "Collection<Integer> merged = Stream.of(collection1, collection2)\n         .flatMap(Collection::stream)\n         .collect(Collectors.toList());",
      "name": "Concatenate two lists together"
    },
    "split_list_at_index": {
      "code": "List<Integer> firstPart = myList.subList(0,1);\nList<Integer> secondPart = myList.subList(1, myList.size());",
      "name": "Split lists at an index"
    },
    "split_list_at_value": {
      "not-implemented": true,
      "name": "Split list at a value"
    },
    "duplicate_a_list": {
      "code": "List<Integer> duplicateList = new LinkedList<>(myList);",
      "name": "Duplicate a list"
    },
    "duplicate_subset_of_list": {
      "code": "List<Integer> duplicateList = new LinkedList<>(myList.subList(2,5));",
      "name": "Duplicate a portion/subset of a list"
    },
    "get_list_length": {
      "code": "myList.size();",
      "name": "Get list length"
    },
    "resize_list": {
      "comment": "You can remove items individually to reach the desired size.",
      "not-implemented": true,
      "name": "Increase/decrease list size"
    },
    "do_two_lists_match_exactly": {
      "comment": "Check the Javadocs for the type of list1 to confirm the behavior is deep equals.",
      "code": "list1.equals(list2);",
      "name": "Do two lists match every element?"
    },
    "do_two_lists_contain_same_items": {
      "comment": "Check the Javadocs for the type of list1 to confirm the behavior is deep equals.",
      "code": "list1.equals(list2);",
      "name": "Do two lists contain all the same items?"
    },
    "does_list_satisfy_some_expression": {
      "not-implemented": true,
      "name": "Does a list satisfy some expression?"
    },
    "does_list_not_satisfy_an_expression": {
      "not-implemented": true,
      "name": "Does a list entirely not satisfy an expression?"
    },
    "sort_list": {
      "comment": "`Collections.sort` has an overloaded version that takes a comparator as the second parameter, if custom comparison logic is needed.",
      "code": "Collections.sort(myList)",
      "name": "Sort a list"
    },
    "shuffle_list": {
      "not-implemented": true,
      "name": "Shuffle list elements"
    },
    "reverse_list": {
      "code": "myList.reverse();",
      "name": "Reverse order of list elements"
    },
    "map": {
      "not-implemented": true,
      "name": "Map function across list"
    },
    "filter": {
      "comment": "Find all elements greater than 10, return as a new list.",
      "code": "myList.stream().filter(n -> n > 10).collect(Collectors.toList())",
      "name": "Filter a list based on criteria"
    },
    "reduce_left": {
      "comment": "Example taken from https://www.baeldung.com/java-stream-reduce",
      "code": "List<Integer> ages = Arrays.asList(25, 30, 45, 28, 32);\nint computedAges = ages.parallelStream().reduce(0, (a, b) -> a + b, Integer::sum);",
      "name": "Reduce a list left-to-right"
    },
    "reduce_right": {
      "not-implemented": true,
      "name": "Reduce a list right-to-left"
    }
  }
}
