{
  "meta": {
    "language": "java",
    "language_version": "11",
    "language_name": "Java",
    "structure": "operators"
  },
  "concepts": {
    "addition": {
      "code": "+",
      "name": "Addition operator"
    },
    "addition_assignment": {
      "code": "+=",
      "name": "Addition and assignment operator"
    },
    "subtraction": {
      "code": "-",
      "name": "Subtraction operator"
    },
    "subtraction_assignment": {
      "code": "-=",
      "name": "Subtraction and assignment operator"
    },
    "multiplication": {
      "code": "*",
      "name": "Multiplication operator"
    },
    "multiplication_assignment": {
      "code": "*=",
      "name": "Multiplication and assignment operator"
    },
    "division": {
      "comment": "If either operand is a float or double, then floating point division is used",
      "code": "10.0d / 4",
      "name": "Division operator"
    },
    "division_assignment": {
      "code": "x /= 2",
      "name": "Division and assignment operator"
    },
    "integer_division": {
      "comment": "If both operands are integers or longs, then integral division is used",
      "code": "10 / 3",
      "name": "Integer division operator"
    },
    "integer_division_assignment": {
      "code": "x /= 4",
      "name": "Integer division and assignment operator"
    },
    "modulus": {
      "code": "%",
      "name": "Modulus (remainder) operator"
    },
    "modulus_assignment": {
      "code": "%=",
      "name": "Modulus and assignment operator"
    },
    "unary_plus": {
      "comment": "This is somewhat redundant as the default sign for numeric values is positive",
      "code": "x = +7",
      "name": "Unary plus operator"
    },
    "unary_minus": {
      "code": "y = -12",
      "name": "Unary minus operator"
    },
    "increment": {
      "comment": "Supports both pre and post increment",
      "code": "++x\nx++", 
      "name": "Increment (add 1) operator"
    },
    "decrement": {
      "comment": "Supports both pre and post decrement",
      "code": "--x\nx--",
      "name": "Decrement (subtract 1) operator"
    },
    "exponential": {
      "not-implemented": "true",
      "name": "Exponential operator"
    },
    "factorial": {
      "not-implemented": "true",
      "name": "Factorial operator"
    },
    "absolute_value": {
      "code": "Math.abs(-4)",
      "name": "Absolute value operator"
    },
    "percentage": {
      "not-implemented": "true",
      "name": "Percentage operator"
    },
    "equal_to": {
      "code": "==",
      "name": "Equality operator"
    },
    "not_equal_to": {
      "code": "!=",
      "name": "Not equal to operator"
    },
    "less_than": {
      "code": "<",
      "name": "Less than operator"
    },
    "less_than_or_equal_to": {
      "code": "<=",
      "name": "Less than or equal to operator"
    },
    "greater_than": {
      "code": ">",
      "name": "Greater than operator"
    },
    "greater_than_or_equal_to": {
      "code": ">=",
      "name": "Greater than or equal to operator"
    },
    "null_coalescing": {
      "not-implemented": "true",
      "name": "Null coalescing operator"
    },
    "is": {
      "not-implemented": "true",
      "name": "Is operator"
    },
    "is_not": {
      "not-implemented": "true",
      "name": "Is not operator"
    },
    "logical_and": {
      "code": "a && b",
      "name": "Logical AND operator"
    },
    "and_assignment": {
      "not-implemented": "true"
    },
    "logical_or": {
      "code": "a || b",
      "name": "Logical OR operator"
    },
    "or_assignment": {
      "not-implemented": "true"
    },
    "logical_not": {
      "code": "!x",
      "name": "Logical NOT operator"
    },
    "bitwise_and": {
      "code": "x & y",
      "name": "Bitwise AND operator"
    },
    "bitwise_and_assignmnet": {
      "code": "x &= 0x000F",
      "name": "Bitwise AND and assignment operator"
    },
    "bitwise_or": {
      "code": "x | y",
      "name": "Bitwise OR operator"
    },
    "bitwise_or_assignment": {
      "code": "foo |= 0x2222",
      "name": "Bitwise OR and assignment operator"
    },
    "bitwise_not": {
      "code": "~x",
      "name": "Bitwise NOT operator"
    },
    "not_assignment": {
      "name": "Bitwise NOT and assignment operator",
      "not-implemented": "true"
    },
    "bitwise_xor": {
      "code": "x ^ y",
      "name": "Bitwise XOR operator"
    },
    "bitwise_xor_assignment": {
      "not-implemented": "true",
      "name": "bitwise_xor_assignment"
    },
    "bitwise_xnor": {
      "name": "Bitwise XNOR operator",
      "not-implemented": "true",
      "comment": "Can be implemented like `(!a ^ b)`"
    },
    "bitwise_xnor_assignment": {
      "name": "Bitwise XNOR and assignment operator",
      "not-implemented": "true"
    },
    "left_shift": {
      "code": "val << 2",
      "name": "Left shift bitwise operator"
    },
    "left_shift_assignment": {
      "code": "x <<= 4",
      "name": "Left shift assignment operator"
    },
    "right_shift": {
      "code": "val >> 2",
      "name": "Right shift bitwise operator"
    },
    "right_shift_assignment": {
      "code": "y >>= 6",
      "name": "Right shift assignment operator"
    },
    "ternary": {
      "code": "cond ? whenTrue : whenFalse",
      "name": "Ternary operator"
    },
    "null_forgiving": {
      "not-implemented": "true",
      "name": "Null forgiving operator"
    }
  }
}
