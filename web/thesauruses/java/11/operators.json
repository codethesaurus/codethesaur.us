{
  "meta": {
    "language": "java",
    "language_version": "11",
    "language_name": "Java",
    "structure": "operators"
  },
  "concepts": {
    "addition": {
      "code": "a + b",
      "name": "Addition operator"
    },
    "addition_assignment": {
      "code": "a += b, equivalant to 'a = a + b'",
      "name": "Addition and assignment operator"
    },
    "subtraction": {
      "code": "a - b",
      "name": "Subtraction operator"
    },
    "subtraction_assignment": {
      "code": "a -= b, equivalant to 'a = a - b'",
      "name": "Subtraction and assignment operator"
    },
    "multiplication": {
      "code": "a * b",
      "name": "Multiplication operator"
    },
    "multiplication_assignment": {
      "code": "a *= b, equivalant to 'a = a * b'",
      "name": "Multiplication and assignment operator"
    },
    "division": {
      "code": "a / b",
      "name": "Division operator"
    },
    "division_assignment": {
      "code": "a /= b, equivalant to 'a = a / b'",
      "name": "Division and assignment operator"
    },
    "modulus": {
      "code": "a % b",
      "name": "Modulus (remainder) operator"
    },
    "modulus_assignment": {
      "code": "a %= b, equivalant to 'a = a % b'",
      "name": "Modulus and assignment operator"
    },
    "increment": {
      "code": "++",
      "name": "Increment (add 1) operator"
    },
    "decrement": {
      "code": "--",
      "name": "Decrement (subtract 1) operator"
    },
    "exponential": {
      "not-implemented": "true",
      "name": "Exponential operator"
    },
    "factorial": {
      "not-implemented": "true",
      "name": "Factorial operator"
    },
    "absolute_value": {
      "code": "Math.abs(-4)",
      "name": "Absolute value operator"
    },
    "percentage": {
      "code": "%",
      "name": "Percentage operator"
    },
    "equal_to": {
      "code": "a == b",
      "name": "Equality operator"
    },
    "not_equal_to": {
      "code": "a != b",
      "name": "Not equal to operator"
    },
    "less_than": {
      "code": "a < b",
      "name": "Less than operator"
    },
    "less_than_or_equal_to": {
      "code": "a <= b",
      "name": "Less than or equal to operator"
    },
    "greater_than": {
      "code": "a > b",
      "name": "Greater than operator"
    },
    "greater_than_or_equal_to": {
      "code": "a >= b",
      "name": "Greater than or equal to operator"
    },
    "null_coalescing": {
      "not-implemented": "true",
      "name": "Null coalescing operator"
    },
    "is": {
      "not-implemented": "true",
      "name": "Is operator"
    },
    "is_not": {
      "not-implemented": "true",
      "name": "Is not operator"
    },
    "left_shift": {
      "code": "a << b",
      "name": "Left shift bitwise operator"
    },
    "left_shift_assignment": {
      "code": "a <<= b, equivalant to 'a = a << b'",
      "name": "Left shift assignment operator"
    },
    "right_shift": {
      "code": "a >> b",
      "name": "Right shift bitwise operator"
    },
    "bitwise_and": {
      "code": "a & b",
      "name": "Bitwise AND operator"
    },
    "bitwise_and_assignment": {
      "code": "a &= b, equivalant to 'a = a & b'",
      "name": "Bitwise AND and assignment operator"
    },
    "bitwise_or": {
      "code": "a | b",
      "name": "Bitwise OR operator"
    },
    "bitwise_or_assignment": {
      "code": "a |= b, equivalant to 'a = a | b'",
      "name": "Bitwise OR and assignment operator"
    },
    "bitwise_xor": {
      "code": "a ^ b",
      "name": "Bitwise XOR operator"
    },
    "bitwise_xor_assignment": {
      "code": "a ^= b, equivalant to 'a = a ^ b'",
      "name": "Bitwise XOR and assignment operator"
    },
    "bitwise_complement": {
      "code": "a ~ b",
      "name": "Bitwise complement operator"
    },
    "right_shift_assignment": {
      "code": "a >>= b, equivalant to 'a = a >> b'",
      "name": "Right shift assignment operator"
    },
    "ternary": {
      "code": "? :",
      "name": "Ternary operator"
    },
    "null_forgiving": {
      "not-implemented": "true",
      "name": "Null forgiving operator"
    }
  }
}
