{
  "meta": {
    "language": "php",
    "language_version": "7.4",
    "language_name": "PHP",
    "structure": "operators"
  },
  "concepts": {
    "addition": {
      "code": "$operand1 + $operand2",
      "name": "Addition operator"
    },
    "addition_assignment": {
      "code": "$operand1 += $operand2",
      "name": "Addition and assignment operator"
    },
    "subtraction": {
      "code": "$operand1 - $operand2",
      "name": "Subtraction operator"
    },
    "subtraction_assignment": {
      "code": "$operand1 -= $operand2",
      "name": "Subtraction and assignment operator"
    },
    "multiplication": {
      "code": "$operand1 * $operand2",
      "name": "Multiplication operator"
    },
    "multiplication_assignment": {
      "code": "$operand1 *= $operand2",
      "name": "Multiplication and assignment operator"
    },
    "division": {
      "code": "$operand1 / $operand2",
      "name": "Division operator"
    },
    "division_assignment": {
      "code": "$operand1 /= $operand2",
      "name": "Division and assignment operator"
    },
    "integer_division": {
      "code": "intdiv($operand1,$operand2)",
      "name": "Integer division operator"
    },
    "modulus": {
      "code": "$operand1 % $operand2",
      "name": "Modulus (remainder) operator"
    },
    "modulus_assignment": {
      "code": "$operand1 %= $operand2",
      "name": "Modulus and assignment operator"
    },
    "unary_plus": {
      "code": "+$operand1",
      "name": "Unary plus operator"
    },
    "unary_minus": {
      "code": "-$operand1",
      "name": "Unary minus operator"
    },
    "increment": {
      "code": "$operand1++",
      "name": "Increment (add 1) operator"
    },
    "decrement": {
      "code": "$operand1--",
      "name": "Decrement (subtract 1) operator"
    },
    "exponential": {
      "code": "$operand1 ** $operand2",
      "name": "Exponential operator"
    },
    "absolute_value": {
      "code": "abs($operand1)",
      "name": "Absolute value operator"
    },
    "equal_to": {
      "code": "$operand1 == $operand2",
      "name": "Equality operator"
    },
    "not_equal_to": {
      "code": "$operand1 != $operand2",
      "name": "Not equal to operator"
    },
    "less_than": {
      "code": "$operand1 < $operand2",
      "name": "Less than operator"
    },
    "less_than_or_equal_to": {
      "code": "$operand1 <= $operand2",
      "name": "Less than or equal to operator"
    },
    "greater_than": {
      "code": "$operand1 > $operand2",
      "name": "Greater than operator"
    },
    "greater_than_or_equal_to": {
      "code": "$operand1 >= $operand2",
      "name": "Greater than or equal to operator"
    },
    "null_coalescing": {
      "code": "$operand1 ?? $operand2",
      "name": "Null coalescing operator"
    },
    "logical_and": {
      "code": ["$operand1 && $operand2", "$operand1 and $operand2"],
      "name": "Logical AND operator"
    },
    "logical_or": {
      "code": ["$operand1 || $operand2", "$operand1 or $operand2"],
      "name": "Logical OR operator"
    },
    "logical_not": {
      "code": "!$operand1",
      "name": "Logical NOT operator"
    },
    "bitwise_and": {
      "code": "$operand1 & $operand2",
      "name": "Bitwise AMD operator"
    },
    "bitwise_and_assignment": {
      "code": "$operand1 &= $operand2",
      "name": "Bitwise AND and assignment operator"
    },
    "bitwise_or": {
      "code": "$operand1 | $operand2",
      "name": "Bitwise OR operator"
    },
    "bitwise_or_assignment": {
      "code": "$operand1 |= $operand2",
      "name": "Bitwise OR and assignment operator"
    },
    "bitwise_not": {
      "code": "~$operand1",
      "name": "Bitwise NOT operator"
    },
    "bitwise_xor": {
      "code": "$operand1 ^ $operand2",
      "name": "Bitwise XOR operator"
    },
    "bitwise_xor_assignment": {
      "code": "$operand1 ^= $operand2",
      "name": "Bitwise XOR and assignment operator"
    },
    "bitwise_xnor": {
      "name": "Bitwise XNOR operator",
      "not-implemented": true
    },
    "bitwise_xnor_assignment": {
      "name": "Bitwise XMOR and assignment operator",
      "not-implemented": true
    },
    "left_shift": {
      "code": "$operand1 << $operand2",
      "name": "Left shift bitwise operator"
    },
    "left_shift_assignment": {
      "code": "$operand1 <<= $operand2",
      "name": "Left shift assignment operator"
    },
    "right_shift": {
      "code": "$operand1 >> $operand2",
      "name": "Right shift bitwise operator"
    },
    "right_shift_assignment": {
      "code": "$operand1 >>= $operand2",
      "name": "Right shift assignment operator"
    },
    "ternary": {
      "code": "$operand1 ? doTrue : doFalse",
      "name": "Ternary operator"
    }
  }
}
