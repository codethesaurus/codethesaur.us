{
  "meta": {
    "language": "swift",
    "language_version": "5.3.3",
    "language_name": "Swift",
    "structure": "lists"
  },
  "concepts": {
    "name_of_ordered_mutable_list": {
      "code": "Array[type]",
      "comment": "This is mutable only when it is assigned to a variable",
      "name": "What is a ordered mutable list called?"
    },
    "create_a_ordered_mutable_list": {
      "code": "var someArray:Array<Int> = [-1, 122, 190]\n var someArray:[Int] = [-1, 122, 190]\n",
      "comment": "You can use either of them",
      "name": "Create the list"
    },
    "ordered_mutable_list_start_number": {
      "code": "0",
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_mutable_list": {
      "code": "someArray[3]",
      "name": "Access element by index"
    },
    "insert_into_beginning_of_ordered_mutable_list": {
      "code": "someArray.insert(23, at: 0)",
      "name": "Insert element at beginning"
    },
    "insert_into_end_of_ordered_mutable_list": {
      "code": "someArray += [-23]",
      "name": "Insert element at end"
    },
    "insert_into_middle_of_ordered_mutable_list": {
      "code": "someArray.insert(23, at: 4)",
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_ordered_mutable_list": {
      "code": "someArray.remove(at: 0)",
      "name": "Erase first element"
    },
    "erase_element_at_end_of_ordered_mutable_list": {
      "code": "someArray.removeLast()",
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_ordered_mutable_list": {
      "code": "someArray.remove(at: 4)",
      "name": "Erase element in the middle"
    },
    "swap_elements_in_ordered_mutable_list": {
      "code": "someArray.swapAt(2, 3)",
      "name": "Swap two elements"
    },
    "delete_ordered_mutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_unordered_mutable_list": {
      "code": "Dictionary<Key, Value>",
      "name": "What is a unordered mutable list called?"
    },
    "create_a_unordered_mutable_list": {
      "code": "var someList: [Int: String] = [:]",
      "name": "unordered"
    },
    "unordered_mutable_list_start_number": {
      "not-implemented": "true",
      "comment": "This operation is not necessary as the elements are accessed by the key",
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_mutable_list": {
      "code": "someList[26]",
      "name": "Access element by index"
    },
    "insert_into_unordered_mutable_list": {
      "not-implemented": "true",
      "comment": "This operation is not necessary as the elements are accessed by the key",
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_unordered_mutable_list": {
      "not-implemented": "true",
      "comment": "This operation is not necessary as the elements are accessed by the key",
      "name": "Erase first element"
    },
    "erase_element_at_end_of_unordered_mutable_list": {
      "not-implemented": "true",
      "comment": "This operation is not necessary as the elements are accessed by the key",
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_unordered_mutable_list": {
      "code": "someList[1] = nil",
      "name": "Erase element in the middle"
    },
    "swap_elements_in_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Swap two elements"
    },
    "delete_unordered_mutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_ordered_immutable_list": {
      "code": "Array[type]",
      "comment": "This is only immutable when it is assigned to a constant",
      "name": "What is a ordered immutable list called?"
    },
    "create_a_ordered_immutable_list": {
      "code": "let someArray:Array<Int> = [-1, 122, 190]\n let someArray:[Int] = [-1, 122, 190]\n",
      "name": "Create the list"
    },
    "ordered_immutable_list_start_number": {
      "code": "0",
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_immutable_list": {
      "code": "someArray[5]",
      "name": "Access element by index"
    },
    "delete_ordered_immutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_unordered_immutable_list": {
      "code": "Dictionary<Key, Value>",
      "comment": "It is only immutable when assigned to a constant",
      "name": "What is a unordered immutable list called?"
    },
    "create_a_unordered_immutable_list": {
      "code": "let someList:[Int: String] = [:]",
      "name": "Create the list"
    },
    "unordered_immutable_list_start_number": {
      "not-implemented": "true",
      "comment": "This operation is not necessary as the elements are accessed by the key",
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_immutable_list": {
      "code": "someList[4]",
      "name": "Access element by index"
    },
    "delete_unordered_immutable_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "What is a mutable hashed list called?"
    },
    "create_a_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Create the list"
    },
    "insert_element_to_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Insert an element"
    },
    "erase_element_from_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Erase an element from the list"
    },
    "delete_mutable_hashed_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "name_of_immutable_hashed_list": {
      "not-implemented": "true",
      "name": "What is an immutable hashed list called?"
    },
    "create_a_immutable_hashed_list": {
      "not-implemented": "true",
      "name": "Create the list"
    },
    "delete_immutable_hashed_list": {
      "not-implemented": "true",
      "name": "Delete the list"
    },
    "create_a_mutable_set": {
      "code": "var someDictionary:[int: String] = [0: \"Zero\", 1: \"One\"]",
      "comment": "This is only mutable when assigned to a variable",
      "name": "Create a mutable key/value set"
    },
    "get_key_from_mutable_set": {
      "code": "someDictionary.keys[2]",
      "name": "Get key"
    },
    "get_value_from_mutable_set": {
      "code": "someDictionary[0]\n someDictionary.values[0]",
      "name": "Get value"
    },
    "get_all_keys_from_mutable_set": {
      "code": "someDictionary.keys",
      "name": "Get all keys"
    },
    "get_all_values_from_mutable_set": {
      "code": "someDictionary.values",
      "name": "Get all values"
    },
    "swap_key_and_value_in_mutable_set": {
      "not-implemented": "true",
      "name": "Swap a key and value"
    },
    "delete_mutable_set": {
      "not-implemented": "true",
      "name": "Delete the set"
    },
    "create_a_immutable_set": {
      "code": "let someDictionary:[int: String] = [0: \"Zero\", 1: \"One\"]",
      "comment": "This is only immutable when assigned to a constant",
      "name": "Create an immutable key/value set"
    },
    "get_key_from_immutable_set": {
      "code": "someDictionary.keys[2]",
      "name": "Get key"
    },
    "get_value_from_immutable_set": {
      "code": "someDictionary[0]\n someDictionary.values[0]",
      "name": "Get value"
    },
    "get_all_keys_from_immutable_set": {
      "code": "someDictionary.keys",
      "name": "Get all keys"
    },
    "get_all_values_from_immutable_set": {
      "code": "someDictionary.values",
      "name": "Get all values"
    },
    "swap_key_and_value_in_immutable_set": {
      "not-implemented": "true",
      "name": "Swap a key and value"
    },
    "delete_immutable_set": {
      "not-implemented": "true",
      "name": "Delete the set"
    },
    "find_element_at_position": {
      "code": "someArray[2]"
    },
    "find_element_by_value": {
      "code": "someArray.firstIndex(of: \"blue\")",
      "name": "Find/search for an element by value"
    },
    "find_minimum_element": {
      "code": "someArray.min()",
      "name": "Find the minimum value in a list"
    },
    "find_maximum_element": {
      "code": "someArray.max()",
      "name": "Find the maximum value in a list"
    },
    "convert_list_to_string": {
      "code": "let codes = [\"abc\",\"def\",\"ghi\"] \nlet codesAsText = codes.reduce(\"\", +)",
      "name": "Convert a list to a string"
    },
    "concatenate_two_lists": {
      "code": "someArray1 + someArray2",
      "name": "Concatenate two lists together"
    },
    "split_list_at_index": {
      "not-implemented": "true",
      "name": "Split lists at an index"
    },
    "split_list_at_value": {
      "not-implemented": "true",
      "name": "Split list at a value"
    },
    "duplicate_a_list": {
      "not-implemented": "true",
      "comment": "Beyond the scope of this tool",
      "name": "Duplicate a list"
    },
    "duplicate_subset_of_list": {
      "not-implemented": "true",
      "name": "Duplicate a portion/subset of a list"
    },
    "get_list_length": {
      "code": "someArray.count",
      "name": "Get list length"
    },
    "resize_list": {
      "not-implemented": "true",
      "name": "Increase/decrease list size"
    },
    "do_two_lists_match_exactly": {
      "code": "someArray1.elementsEqual(someArray2)",
      "name": "Do two lists match every element?"
    },
    "do_two_lists_contain_same_items": {
      "code": "someArray1 == someArray2",
      "name": "Do two lists contain all the same items?"
    },
    "does_list_satisfy_some_expression": {
      "code": "someArray1.allSatisfy(func<>)",
      "name": "Does a list satisfy some expression?"
    },
    "does_list_not_satisfy_an_expression": {
      "code": "!someArray1.allSatisfy(func<>)",
      "name": "Does a list entirely not satisfy an expression?"
    },
    "sort_list": {
      "code": "someArray.sort()\n let array2 = someArray.sort()",
      "comment": "The first example sorts in place",
      "name": "Sort a list"
    },
    "shuffle_list": {
      "code": "someArray.shuffle()\n let array2 = someArray.shuffle()",
      "comment": "The first example shuffles in place",
      "name": "Shuffle list elements"
    },
    "reverse_list": {
      "code": "someArray.reverse()\n let array2 = someArray.reverse()",
      "comment": "The first example reverses in place",
      "name": "Reverse order of list elements"
    },
    "map": {
      "code": "let doubled = sameArray.map{ $0 * 2 }",
      "name": "Map function across list"
    },
    "filter": {
      "code": "let filtered = someArray.filter { func }",
      "name": "Filter a list based on criteria"
    },
    "reduce_left": {
      "code": "let codes = [\"abc\",\"def\",\"ghi\"] \nlet concatenatedText = codes.reduce(\"\", +)",
      "name": "Reduce a list left-to-right"
    },
    "reduce_right": {
      "not-implemented": "true",
      "name": "Reduce a list right-to-left"
    }
  }
}
