{
  "meta": {
    "language": "typescript",
    "language_version": "4.4",
    "language_name": "Typescript",
    "structure": "lists"
  },
  "concepts": {
    "name_of_ordered_mutable_list": {
      "code": "Array",
      "name": "What is a ordered mutable list called?"
    },
    "create_a_ordered_mutable_list": {
      "name": "Create the list",
      "code": "const array: type[] = [];",
      "comment": "Examples: const scores:(string | number) = [1,2,3,'hi'];"
    },
    "ordered_mutable_list_start_number": {
      "name": "What number does it start at?",
      "code": "0"
    },
    "ordered_mutable_list_can_be_appended": {
      "name": "Can you append to it?",
      "code": "Yes"
    },
    "ordered_mutable_list_can_be_inserted_in_middle": {
      "name": "Can you insert into the middle of it?",
      "code": "Yes"
    },
    "access_element_in_ordered_mutable_list": {
      "name": "Access element by index",
      "code": "const element = array[3]"
    },
    "insert_into_beginning_of_ordered_mutable_list": {
      "name": "Insert element at beginning",
      "code": "array.unshift(8)"
    },
    "insert_into_end_of_ordered_mutable_list": {
      "name": "Insert element at end",
      "code": "array.push(9)"
    },
    "insert_into_middle_of_ordered_mutable_list": {
      "name": "Insert element in middle",
      "code": "array.splice(2, 0, 8)",
      "comment": "Here, 2 is the index to add to, 0 is the number of elements to remove, 8 is the element to add"
    },
    "erase_element_at_beginning_of_ordered_mutable_list": {
      "name": "Erase first element",
      "code": "array.shift()"
    },
    "erase_element_at_end_of_ordered_mutable_list": {
      "name": "Erase last element",
      "code": "array.pop()"
    },
    "erase_element_in_middle_of_ordered_mutable_list": {
      "name": "Erase element in the middle",
      "code": "array.splice(3, 1) \n 3 is the index to remove from, 1 is the number of elements to remove"
    },
    "swap_elements_in_ordered_mutable_list": {
      "name": "Swap two elements",
      "code": "[array[0], array[1]] = [array[1], array[0]]"
    },
    "delete_ordered_mutable_list": {
      "name": "Delete the list",
      "code": "array = undefined"
    },
    "name_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "What is a unordered mutable list called?"
    },
    "create_a_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "unordered_mutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "unordered_mutable_list_can_be_appended": {
      "not-implemented": true,
      "name": "Can you append to it?"
    },
    "unordered_mutable_list_can_be_inserted_in_middle": {
      "not-implemented": true,
      "name": "Can you insert into the middle of it?"
    },
    "access_element_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "insert_into_beginning_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element at beginning"
    },
    "insert_into_end_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element at end"
    },
    "insert_into_middle_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase first element"
    },
    "erase_element_at_end_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase element in the middle"
    },
    "swap_elements_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Swap two elements"
    },
    "delete_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_ordered_immutable_list": {
      "not-implemented": true,
      "name": "What is a ordered immutable list called?"
    },
    "create_a_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "ordered_immutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "delete_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_unordered_immutable_list": {
      "not-implemented": true,
      "name": "What is a unordered immutable list called?"
    },
    "create_a_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "unordered_immutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "delete_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_mutable_hashed_list": {
      "not-implemented": true,
      "name": "What is a mutable hashed list called?"
    },
    "create_a_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "insert_element_to_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Insert an element"
    },
    "erase_element_from_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Erase an element from the list"
    },
    "delete_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_immutable_hashed_list": {
      "not-implemented": true,
      "name": "What is an immutable hashed list called?"
    },
    "create_a_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "insert_element_to_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Insert an element"
    },
    "erase_element_from_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Erase an element from the list"
    },
    "delete_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "create_a_mutable_set": {
      "code": "const myObject: Record<string, number> = {\"teamA\": 3, \"teamB\": 7}",
      "comment": "There are multiple ways to type this.  You could also use `{[key: string]: number}` to represent the same thing.",
      "name": "Create a mutable key/value set"
    },
    "get_key_from_mutable_set": {
      "code": "Object.keys(myObject).find((key) => myObject[key] === value)",
      "comment": "Returns the first key that matches the value.  To return an array of all keys that match the value, use `.filter` instead of `.find`.",
      "name": "Get key"
    },
    "get_value_from_mutable_set": {
      "code": "myObject[key]",
      "name": "Get value"
    },
    "get_all_keys_from_mutable_set": {
      "code": "Object.keys(myObject)",
      "name": "Get all keys"
    },
    "get_all_values_from_mutable_set": {
      "code": "Object.values(myObject)",
      "name": "Get all values"
    },
    "swap_key_and_value_in_mutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_mutable_set": {
      "code": "myObject = {}",
      "name": "Delete the set"
    },
    "create_a_immutable_set": {
      "name": "Create an immutable key/value set",
      "code": "const myObject: Readonly<Record<string, number>> = {\"property1\": 3, \"property2\": 7}",
      "comment": "Multiple ways to implement this.  You can also use `as const`.  IE: `const myObject: MyObjectType = {\"property1\": 3, \"property2\": 7} as const`"
    },
    "get_key_from_immutable_set": {
      "code": "Object.keys(myObject).find((key) => myObject[key] === value)",
      "name": "Get key"
    },
    "get_value_from_immutable_set": {
      "code": "myObject[key]",
      "name": "Get value"
    },
    "get_all_keys_from_immutable_set": {
      "code": "Object.keys(myObject)",
      "name": "Get all keys"
    },
    "get_all_values_from_immutable_set": {
      "code": "Object.values(myObject)",
      "name": "Get all values"
    },
    "swap_key_and_value_in_immutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_immutable_set": {
      "not-implemented": true,
      "name": "Delete the set"
    },
    "find_element_by_value": {
      "code": "array.find((element) => element === value)",
      "name": "Find/search for an element by value"
    },
    "find_minimum_element": {
      "code": "Math.min.apply(null, array)\nOR\nMath.min(...array)",
      "name": "Find the minimum value in a list"
    },
    "find_maximum_element": {
      "code": "Math.max.apply(null, array)\nOR\nMath.max(...array)",
      "name": "Find the maximum value in a list"
    },
    "convert_list_to_string": {
      "code": "array.toString()",
      "name": "Convert a list to a string"
    },
    "concatenate_two_lists": {
      "code": "let newArray = array1.concat(array2,array3,...)\nreturn newArray",
      "name": "Concatenate two lists together"
    },
    "split_list_at_index": {
      "code": "let arr = [ ... ];\nlet part1 = arr.slice(0,index);\nlet part2 = arr.slice(index);",
      "comment": "There is no inbuilt function that takes an index and returns two arrays",
      "name": "Split lists at an index"
    },
    "split_list_at_value": {
      "code": "let arr = [ ... ];\nlet part1 = arr.slice(0,arr.indexOf(value));\nlet part2 = arr.slice(arr.indexOf(value));",
      "comment": "There is no inbuilt function that takes an index and returns two arrays",
      "name": "Split list at a value"
    },
    "duplicate_a_list": {
      "code": "let array2 = Array.from(array1)",
      "name": "Duplicate a list"
    },
    "duplicate_subset_of_list": {
      "code": "let array2 = array1.slice(start,end)",
      "name": "Duplicate a portion/subset of a list"
    },
    "get_list_length": {
      "code": "array.length",
      "name": "Get list length"
    },
    "resize_list": {
      "code": "array.length = value",
      "name": "Increase/decrease list size"
    },
    "do_two_lists_match_exactly": {
      "not-implemented": true,
      "name": "Do two lists match every element?"
    },
    "do_two_lists_contain_same_items": {
      "code": "const isEqual:boolean = array1.every(e => array2.indexOf(e) >= 0) && (array1.length === array2.length)\nreturn isEqual",
      "name": "Do two lists contain all the same items?"
    },
    "does_list_satisfy_some_expression": {
      "code": "array.some((element, index) => { ... } )",
      "name": "Does a list satisfy some expression?"
    },
    "does_list_not_satisfy_an_expression": {
      "code": "array.every((element, index) => { ... } )",
      "name": "Does a list entirely not satisfy an expression?"
    },
    "sort_list": {
      "code": "array.sort()",
      "name": "Sort a list"
    },
    "shuffle_list": {
      "not-implemented": true,
      "name": "Shuffle list elements"
    },
    "reverse_list": {
      "code": "array.reverse()",
      "name": "Reverse order of list elements"
    },
    "map": {
      "code": "array.map((element, index) => { ... } )",
      "name": "Map function across list"
    },
    "filter": {
      "code": "array.filter((element, index) => { ... } )",
      "name": "Filter a list based on criteria"
    },
    "reduce_left": {
      "code": "array.reduce((previousValue, currentValue, currentIndex) => { ... } )",
      "name": "Reduce a list left-to-right"
    },
    "reduce_right": {
      "code": "array.reduceRight((previousValue, currentValue, index) => { ... } )",
      "name": "Reduce a list right-to-left"
    },
    "name_of_sorted_mutable_list": {
      "name": "What is a sorted mutable list called?",
      "not-implemented": true
    },
    "create_a_sorted_mutable_list": {
      "name": "Create the list",
      "not-implemented": true
    },
    "sorted_mutable_list_start_number": {
      "name": "What number does it start at?",
      "not-implemented": true
    },
    "sorted_mutable_list_can_be_appended": {
      "name": "Can you append to it?",
      "not-implemented": true
    },
    "sorted_mutable_list_can_be_inserted_in_middle": {
      "name": "Can you insert into the middle of it?",
      "not-implemented": true
    },
    "access_element_in_sorted_mutable_list": {
      "name": "Access element by index",
      "not-implemented": true
    },
    "insert_into_beginning_of_sorted_mutable_list": {
      "name": "Insert element at beginning",
      "not-implemented": true
    },
    "insert_into_end_of_sorted_mutable_list": {
      "name": "Insert element at end",
      "not-implemented": true
    },
    "insert_into_middle_of_sorted_mutable_list": {
      "name": "Insert element in middle",
      "not-implemented": true
    },
    "erase_element_at_beginning_of_sorted_mutable_list": {
      "name": "Erase first element",
      "not-implemented": true
    },
    "erase_element_at_end_of_sorted_mutable_list": {
      "name": "Erase last element",
      "not-implemented": true
    },
    "erase_element_in_middle_of_sorted_mutable_list": {
      "name": "Erase element in the middle",
      "not-implemented": true
    },
    "swap_elements_in_sorted_mutable_list": {
      "name": "Swap two elements",
      "not-implemented": true
    },
    "delete_sorted_mutable_list": {
      "name": "Delete the list",
      "not-implemented": true
    },
    "name_of_sorted_immutable_list": {
      "name": "What is a sorted immutable list called?",
      "not-implemented": true
    },
    "create_a_sorted_immutable_list": {
      "name": "Create the list",
      "not-implemented": true
    },
    "sorted_immutable_list_start_number": {
      "name": "What number does it start at?",
      "not-implemented": true
    },
    "access_element_in_sorted_immutable_list": {
      "name": "Access element by index",
      "not-implemented": true
    },
    "delete_sorted_immutable_list": {
      "name": "Delete the list",
      "not-implemented": true
    }
  }
}
