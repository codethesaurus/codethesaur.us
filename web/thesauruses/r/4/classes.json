{
    "meta": {
      "language": "r",
      "language_name": "R",
      "structure": "classes",
      "language_version": "4"
    },
    "concepts": {
      "normal_class": {
        "name": "Normal class",
        "code": [
          "#S3 implementation\na_cat <- list(name='example',age=5\n class(a_cat) <- 'cats' ",
          "#S4 implentation \nsetClass('cats', \nslots=list(name='character',age='numeric')\n)",
          "#Reference implementation\nsetRefClass('cats', \nfields = list(name='character',age='numeric')\n)"
        ],
        "comment": "There are three ways of setting class in R: S3, S4, and Reference. The S3 class is the original implementation; S3 has no formal definition of a class, rather class is an attribute of an object. The other two are more similar to classes in some other OO languages."
      },
      "abstract_class": {
        "name": "Abstract class",
        "not-implemented":true
      },
      "interface": {
        "name": "Interface",
        "comment": "you would need to declare functions to serve as an interface because R is interpreted and not compiled.",
        "not-implemented":true
      },
      "read_only_class": {
        "name": "Read-only class",
        "not-implemented":true
      },
      "static_class": {
        "name": "Static class",
        "not-implemented":true
      },
      "inner_class": {
        "name": "Inner class",
        "not-implemented":true
      },
      "packages": {
        "name": "Packages",
        "code": [
          "install.packages('the_package')\nlibrary(the_package)"
        ]
      },
      "class_with_generic_type": {
        "name": "Class with a generic type",
        "not-implemented":true
      },
      "private_variables": {
        "name": "Defining private variables",
        "not-implemented":true,
        "comment":"R determines variables by environment, so a variable defined inside of a function is always private to that function and can not be used outside of it."
      },
      "protected_variables": {
        "name": "Defining protected variables",
        "not-implemented":true
      },
      "public_variables": {
        "name": "Defining public variables",
        "not-implemented":true
      },
      "static_variables": {
        "name": "Defining static variables",
        "not-implemented":true
      },
      "private_functions": {
        "name": "Defining private functions",
        "not-implemented":true,
        "comment":"In a package, any function not exported is a treated as a private function and cannot be called."
      },
      "protected_functions": {
        "name": "Defining protected functions",
        "not-implemented":true
      },
      "public_functions": {
        "name": "Defining public functions",
        "code": [
          "myFunc <- function(x){ #my code }"
        ],
        "comment": "R functions implicitly return the last call not assigned to a variable in the function or can have an explicitly returned or invisible item."
      },
      "static_functions": {
        "name": "Defining static functions",
        "not-implemented":true,
        "comment": "R is not compiled"
      },
      "extends_class": {
        "name": "Class that inherits/extends another class",
        "code": [
          "#S4 implentation \nmything <- setOldClass('classtoextend')\nmything <- setClass()",
          "#Reference implementation \nmything <- setReferenceClass('mything',\ncontains='parentclass'\n) "
        ],
        "comment":"No S3 implementation. Code shows S4 implementation and reference. For Reference classes, you can use contains to inherit the parent."
      },
      "extending_interface": {
        "name": "Class/Interface that inherits/extends another class/interface",
        "not-implemented":true
      },
      "calling_superclass_functions": {
        "name": "Calling a superclass function",
        "code": [
          "$callSuper(...)"
        ],
        "comment":"callSuper is only available for Reference classes - only works within a method, and will be resolved to call the inherited method of the same name"
      },
      "overriding_superclass_functions": {
        "name": "Overriding a superclass function",
        "code":[
          "theFuncToOverride <-function(x){\n#your implementation\n}"
        ],
        "comment": "Define the same method in your class."
      },
      "instantiating_object": {
        "name": "Instantiating a new object",
        "code": [
          "objectname <- 5 # instantiates objectname with a value of 5",
          "objectname <- data.frame(\na=c(0,1,2),b=c(0,4,5)\n)"
        ],
        "comment":"everything is an object. objects default to a class by their value.\n Objects can be explictly assigned to classes at the time they are instantiated"
      },
      "instantiating_polymorphic_object": {
        "name": "Instantiating a polymorphic object",
        "not-implemented":true
      },
      "implement_constructor": {
        "name": "Implementing a class constructor",
        "not-implemented":true
      },
      "implement_deconstructor": {
        "name": "Implementing a class deconstructor",
        "not-implemented":true
      }
    }
  }