{
  "meta": {
    "language": "haskell",
    "language_version": "2010",
    "language_name": "Haskell",
    "structure": "lists"
  },
  "concepts": {
    "name_of_ordered_mutable_list": {
      "not-implemented": true,
      "name": "What is a ordered mutable list called?"
    },
    "create_a_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "ordered_mutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "insert_into_beginning_of_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element at beginning"
    },
    "insert_into_end_of_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element at end"
    },
    "insert_into_middle_of_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase first element"
    },
    "erase_element_at_end_of_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase element in the middle"
    },
    "swap_elements_in_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Swap two elements"
    },
    "delete_ordered_mutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "What is a unordered mutable list called?"
    },
    "create_a_unordered_mutable_list": {
      "not-implemented": true,
      "name": "unordered"
    },
    "unordered_mutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "insert_into_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Insert element in middle"
    },
    "erase_element_at_beginning_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase first element"
    },
    "erase_element_at_end_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase last element"
    },
    "erase_element_in_middle_of_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Erase element in the middle"
    },
    "swap_elements_in_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Swap two elements"
    },
    "delete_unordered_mutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_ordered_immutable_list": {
      "not-implemented": true,
      "name": "What is a ordered immutable list called?"
    },
    "create_a_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "ordered_immutable_list_start_number": {
      "not-implemented": true,
      "name": "What number does it start at?"
    },
    "access_element_in_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Access element by index"
    },
    "delete_ordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_unordered_immutable_list": {
      "comment": "`a` is the type of elements of the list",
      "code": "[a]",
      "name": "What is a unordered immutable list called?"
    },
    "create_a_unordered_immutable_list": {
      "code": "[firstElement, secondElement]",
      "name": "Create the list"
    },
    "unordered_immutable_list_start_number": {
      "code": "0",
      "name": "What number does it start at?"
    },
    "access_element_in_unordered_immutable_list": {
      "code": "list !! index",
      "name": "Access element by index"
    },
    "delete_unordered_immutable_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_mutable_hashed_list": {
      "not-implemented": true,
      "name": "What is a mutable hashed list called?"
    },
    "create_a_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Create the list"
    },
    "insert_element_to_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Insert an element"
    },
    "erase_element_from_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Erase an element from the list"
    },
    "delete_mutable_hashed_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "name_of_immutable_hashed_list": {
      "code": "Set",
      "name": "What is an immutable hashed list called?"
    },
    "create_a_immutable_hashed_list": {
      "code": "Set.empty\nSet.fromList list\nSet.fromAscList ascendingList\nSet.fromDescList descendingList\nSet.fromDistinctAscList list\nSet.fromDistinctDescList list",
      "name": "Create the list"
    },
    "delete_immutable_hashed_list": {
      "not-implemented": true,
      "name": "Delete the list"
    },
    "create_a_mutable_set": {
      "not-implemented": true,
      "name": "Create a mutable key/value set"
    },
    "get_key_from_mutable_set": {
      "not-implemented": true,
      "name": "Get key"
    },
    "get_value_from_mutable_set": {
      "not-implemented": true,
      "name": "Get value"
    },
    "get_all_keys_from_mutable_set": {
      "not-implemented": true,
      "name": "Get all keys"
    },
    "get_all_values_from_mutable_set": {
      "not-implemented": true,
      "name": "Get all values"
    },
    "swap_key_and_value_in_mutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_mutable_set": {
      "not-implemented": true,
      "name": "Delete the set"
    },
    "create_a_immutable_set": {
      "code": "import qualified Data.Map as Map\nMap.empty\nMap.singleton key value -- Map containing a single entry\nMap.fromSet generateValueFromKey set\nMap.fromList [(key1, value1), (key2, value2)]",
      "comment": "choose `Data.Map.Strict` or `Data.Map.Lazy` depending on your requirements",
      "name": "Create an immutable key/value set"
    },
    "get_key_from_immutable_set": {
      "not-implemented": true,
      "name": "Get key"
    },
    "get_value_from_immutable_set": {
      "code": "map ! key",
      "name": "Get value"
    },
    "get_all_keys_from_immutable_set": {
      "code": "keys map",
      "name": "Get all keys"
    },
    "get_all_values_from_immutable_set": {
      "code": "elems map",
      "name": "Get all values"
    },
    "swap_key_and_value_in_immutable_set": {
      "not-implemented": true,
      "name": "Swap a key and value"
    },
    "delete_immutable_set": {
      "not-implemented": true,
      "name": "Delete the set"
    },
    "find_element_by_value": {
      "code": "elemIndex elementToSearchFor list",
      "name": "Find/search for an element by value"
    },
    "find_minimum_element": {
      "code": "minimum list",
      "comment": "minimum works on all `Foldables` not just lists",
      "name": "Find the minimum value in a list"
    },
    "find_maximum_element": {
      "code": "maximum list",
      "comment": "maximum works on all `Foldables` not just lists",
      "name": "Find the maximum value in a list"
    },
    "convert_list_to_string": {
      "not-implemented": true,
      "comment": "A `String` is just a `List` of `Char`s",
      "name": "Convert a list to a string"
    },
    "concatenate_two_lists": {
      "name": "Concatenate two lists together",
      "code": "list1 ++ list2"
    },
    "split_list_at_index": {
      "name": "Split lists at an index",
      "code": "splitAt index listToSplit"
    },
    "split_list_at_value": {
      "not-implemented": true,
      "name": "Split list at a value"
    },
    "duplicate_a_list": {
      "not-implemented": true,
      "comment": "Since you cannot mutate a list it is always going to be the same and you can refer to the original list",
      "name": "Duplicate a list"
    },
    "duplicate_subset_of_list": {
      "not-implemented": true,
      "name": "Duplicate a portion/subset of a list"
    },
    "get_list_length": {
      "code": "length list",
      "name": "Get list length"
    },
    "resize_list": {
      "comment": "The list is always gonna be exactly as big as the number of elements that are in it",
      "not-implemented": true,
      "name": "Increase/decrease list size"
    },
    "do_two_lists_match_exactly": {
      "code": "value = listA == listB",
      "name": "Do two lists match every element?"
    },
    "do_two_lists_contain_same_items": {
      "code": "value = listA == listB",
      "name": "Do two lists contain all the same items?"
    },
    "does_list_satisfy_some_expression": {
      "code": "all testFunction foldable -- tests if all elements satisfy the `testFunction`\nany testFunction foldable -- tests if any element satisfies the `testFunction`",
      "name": "Does a list satisfy some expression?"
    },
    "does_list_not_satisfy_an_expression": {
      "comment": "You can easily achieve this with function composition of `all` or `any` and the `not` function",
      "not-implemented": true,
      "name": "Does a list entirely not satisfy an expression?"
    },
    "sort_list": {
      "code": "sort list",
      "name": "Sort a list"
    },
    "shuffle_list": {
      "code": "shuffleM list",
      "comment": "This shuffles your list in a Monad, there are other shuffles available that use a RandomGenerator or a list of random integers to shuffle",
      "name": "Shuffle list elements"
    },
    "reverse_list": {
      "code": "reverse list",
      "name": "Reverse order of list elements"
    },
    "map": {
      "code": "map function list",
      "name": "Map function across list"
    },
    "filter": {
      "code": "filter function list",
      "name": "Filter a list based on criteria"
    },
    "reduce_left": {
      "code": "foldl function start foldable\nfoldl' function start foldable -- strict version of foldl\nfoldl1 function foldable -- folds taking the first element of the foldable as start\nfoldl1' function foldable -- strict version of `foldl1`",
      "name": "Reduce a list left-to-right"
    },
    "reduce_right": {
      "code": "foldr function start foldable\nfoldr1 function foldable -- folds taking the last element of the foldable as start",
      "name": "Reduce a list right-to-left"
    }
  }
}
