{
  "meta": {
    "language": "javascript",
    "language_version": "ECMAScript 2021",
    "language_name": "JavaScript",
    "structure": "operators"
  },
  "concepts": {
    "addition": {
      "code": "operand1 + operand2",
      "name": "Addition operator"
    },
    "addition_assignment": {
      "code": "result += operand1",
      "name": "Addition and assignment operator"
    },
    "subtraction": {
      "code": "operand1 - operand2",
      "name": "Subtraction operator"
    },
    "subtraction_assignment": {
      "code": "result -= operand1",
      "name": "Subtraction and assignment operator"
    },
    "multiplication": {
      "code": "operand1 * operand2",
      "name": "Multiplication operator"
    },
    "multiplication_assignment": {
      "code": "result *= operand1",
      "name": "Multiplication and assignment operator"
    },
    "division": {
      "code": "operand1 / operand2",
      "name": "Division operator"
    },
    "division_assignment": {
      "code": "result /= operand1",
      "name": "Division and assignment operator"
    },
    "integer_division": {
      "not-implemented": "true",
      "name": "Integer Division operator"
    },
    "integer_division_assignment": {
      "not-implemented": "true",
      "name": "Integer Division and assignment operator"
    },
    "modulus": {
      "code": "operand1 % operand2",
      "name": "Modulus (remainder) operator"
    },
    "modulus_assignment": {
      "code": "result %= operand1",
      "name": "Modulus and assignment operator"
    },
    "unary_plus": {
      "code" : "+operand",
      "name" : "Unary plus operator"
  },
    "unary_minus": {
      "code" : "-operand",
      "name" : "Unary minus operator"
  },
    "increment": {
      "code": "++operand or operand++",
      "name": "Increment (add 1) operator"
    },
    "decrement": {
      "code": "--operand or operand--",
      "name": "Decrement (subtract 1) operator"
    },
    "exponential": {
      "code": "operand1 ** operand2",
      "name": "Exponential operator"
    },
    "factorial": {
      "not-implemented": "true",
      "name": "Factorial operator"
    },
    "absolute_value": {
      "not-implemented": "true",
      "name": "Absolute value operator"
    },
    "percentage": {
      "not-implemented": "true",
      "name": "Percentage operator"
    },
    "equal_to": {
      "code": "expession1 == expression2",
      "comment": "There is also === which means strict equality",
      "name": "Equality operator"
    },
    "not_equal_to": {
      "code": "expression1 != expression2",
      "comment": "There is also !== which means strict inequality",
      "name": "Not equal to operator"
    },
    "less_than": {
      "code": "expression1 < expression2",
      "name": "Less than operator"
    },
    "less_than_or_equal_to": {
      "code": "expression1 <= expression2",
      "name": "Less than or equal to operator"
    },
    "greater_than": {
      "code": "expression1 > expression2",
      "name": "Greater than operator"
    },
    "greater_than_or_equal_to": {
      "code": "expression1 >= expression2",
      "name": "Greater than or equal to operator"
    },
    "null_coalescing": {
      "code": "expression1 ?? expression2",
      "name": "Null coalescing operator"
    },
    "is": {
      "not-implemented": "true",
      "name": "Is operator"
    },
    "is_not": {
      "not-implemented": "true",
      "name": "Is not operator"
    },
    "logical_and": {
      "code" : "expression1 && expression2",
      "name" : "Logical AND Operator"
  },
    "logical_or": {
      "code" : "expression1 || expression2",
      "name" : "Logical OR Operator"
  },
  "logical_not": {
      "code" : "!expression",
      "name" : "Logical NOT Operator"
  },
"bitwise_and": {
      "code" : "operand1 & operand2",
      "name" : "Bitwise AND operator"
  },
"bitwise_and_assignmnet": {
      "code" : "result &= operand1",
      "name" : "Bitwise AND and assignment operator"
  },
"bitwise_or": {
      "code" : "operand1 | operand2",
      "name" : "Bitwise OR operator"
  },
"bitwise_or_assignment": {
      "code" : "result |= operand1",
      "name" : "Bitwise OR and assignment operator"
  },
"bitwise_not": {
      "code" : "~operand",
      "name" : "Bitwise NOT operator"
  },
    "bitwise_not_assignment": {
      "not-implemented": "true",
      "name" : "Bitwise NOT and assignment operator"
  },
"bitwise_xor": {
      "code" : "operand1 ^ operand2",
      "name" : "Bitwise XOR operator"
  },
"bitwise_xor_assignment": {
      "code" : "result ^= operand1",
      "name" : "Bitwise XOR and assignment operator"
  },
    "bitwise_xnor": {
      "not-implemented": "true",
      "name" : "Bitwise XNOR operator"
  },
    "bitwise_xnor_assignment": {
      "not-implemented": "true",
      "name" : "Bitwise XNOR and assignment operator"
  },
    "left_shift": {
      "code": "operand1 << value",
      "name": "Left shift bitwise operator"
    },
    "left_shift_assignment": {
      "code": "result <<= value",
      "name": "Left shift assignment operator"
    },
    "right_shift": {
      "code": "operand1 >> value",
      "name": "Right shift bitwise operator"
    },
    "right_shift_assignment": {
      "code": "result >>= value",
      "name": "Right shift assignment operator"
    },
    "ternary": {
      "code": "condition ? value_if_true : value_if_false",
      "name": "Ternary operator"
    },
    "null_forgiving": {
      "not-implemented": "true",
      "name": "Null forgiving operator"
    }
  }
}
